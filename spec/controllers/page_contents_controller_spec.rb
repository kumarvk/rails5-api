require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PageContentsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # PageContent. As you add validations to PageContent, be sure to
  # adjust the attributes here as well.

  let(:page) {
    FactoryGirl.create(:page)
  }

  let(:valid_attributes) {
    FactoryGirl.attributes_for(:page_content, page_id: page.id) 
    # skip("Add a hash of attributes valid for your model")
    # {tag: "page tag name", content: "demo page content", page_id: 1}
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    FactoryGirl.attributes_for(:page_content) 
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PageContentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all page_contents as @page_contents" do
      page_content = PageContent.create! valid_attributes
      get :index, params: {}, session: valid_session
      # expect(assigns(:page_contents)).to eq([page_content])
      expect(assigns(:page_contents)).target.include?(page_content)
    end
  end

  describe "GET #show" do
    it "assigns the requested page_content as @page_content" do
      page_content = PageContent.create! valid_attributes
      get :show, params: {id: page_content.to_param}, session: valid_session
      expect(assigns(:page_content)).to eq(page_content)
    end
  end

  # describe "GET #new" do
  #   it "assigns a new page_content as @page_content" do
  #     get :new, params: {}, session: valid_session
  #     expect(assigns(:page_content)).to be_a_new(PageContent)
  #   end
  # end

  # describe "GET #edit" do
  #   it "assigns the requested page_content as @page_content" do
  #     page_content = PageContent.create! valid_attributes
  #     get :edit, params: {id: page_content.to_param}, session: valid_session
  #     expect(assigns(:page_content)).to eq(page_content)
  #   end
  # end

  # describe "POST #create" do
  #   context "with valid params" do
  #     it "creates a new PageContent" do
  #       expect {
  #         post :create, params: {page_content: valid_attributes}, session: valid_session
  #       }.to change(PageContent, :count).by(1)
  #     end

  #     it "assigns a newly created page_content as @page_content" do
  #       post :create, params: {page_content: valid_attributes}, session: valid_session
  #       expect(assigns(:page_content)).to be_a(PageContent)
  #       expect(assigns(:page_content)).to be_persisted
  #     end

  #     # it "redirects to the created page_content" do
  #     #   post :create, params: {page_content: valid_attributes}, session: valid_session
  #     #   expect(response).to redirect_to(PageContent.last)
  #     # end
  #   end

  #   context "with invalid params" do
  #     it "assigns a newly created but unsaved page_content as @page_content" do
  #       post :create, params: {page_content: invalid_attributes}, session: valid_session
  #       expect(assigns(:page_content)).to be_a_new(PageContent)
  #     end

  #     # it "re-renders the 'new' template" do
  #     #   post :create, params: {page_content: invalid_attributes}, session: valid_session
  #     #   expect(response).to render_template("new")
  #     # end
  #   end
  # end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested page_content" do
  #       page_content = PageContent.create! valid_attributes
  #       put :update, params: {id: page_content.to_param, page_content: new_attributes}, session: valid_session
  #       page_content.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "assigns the requested page_content as @page_content" do
  #       page_content = PageContent.create! valid_attributes
  #       put :update, params: {id: page_content.to_param, page_content: valid_attributes}, session: valid_session
  #       expect(assigns(:page_content)).to eq(page_content)
  #     end

  #     # it "redirects to the page_content" do
  #     #   page_content = PageContent.create! valid_attributes
  #     #   put :update, params: {id: page_content.to_param, page_content: valid_attributes}, session: valid_session
  #     #   expect(response).to redirect_to(page_content)
  #     # end
  #   end

  #   context "with invalid params" do
  #     it "assigns the page_content as @page_content" do
  #       page_content = PageContent.create! valid_attributes
  #       put :update, params: {id: page_content.to_param, page_content: invalid_attributes}, session: valid_session
  #       expect(assigns(:page_content)).to eq(page_content)
  #     end

  #     # it "re-renders the 'edit' template" do
  #     #   page_content = PageContent.create! valid_attributes
  #     #   put :update, params: {id: page_content.to_param, page_content: invalid_attributes}, session: valid_session
  #     #   expect(response).to render_template("edit")
  #     # end
  #   end
  # end

  describe "DELETE #destroy" do
    it "destroys the requested page_content" do
      page_content = PageContent.create! valid_attributes
      expect {
        delete :destroy, params: {id: page_content.to_param}, session: valid_session
      }.to change(PageContent, :count).by(-1)
    end

    # it "redirects to the page_contents list" do
    #   page_content = PageContent.create! valid_attributes
    #   delete :destroy, params: {id: page_content.to_param}, session: valid_session
    #   expect(response).to redirect_to(page_contents_url)
    # end
  end

end
